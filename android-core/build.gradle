apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

def libraryNamespace = 'io.okhi.android_core'
def libraryGroupId = 'io.okhi.android'
def libraryArtifactId = 'core'
def libraryCompileSdk = 33
def libraryTargetSdk = 33
def libraryMinSdk = 19
def libraryVersionCode = 1
def libraryVersion = '1.7.15'



android {
    namespace libraryNamespace
    compileSdk libraryCompileSdk

    defaultConfig {
        minSdk libraryMinSdk
        targetSdk libraryTargetSdk
        versionCode libraryVersionCode
        versionName libraryVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.8.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    testImplementation 'org.mockito:mockito-core:5.3.0'
    testImplementation "com.google.truth:truth:1.1.3"

    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation ("com.squareup.okhttp3:okhttp:3.12.12"){
        force = true //API 19 support
    }
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId
            artifact("$buildDir/outputs/aar/android-core-release.aar")
            pom.withXml {
                // for dependencies and exclusions
                def dependenciesNode = asNode().appendNode('dependencies')
                def configurationNames = ["implementation", "api", "runtimeOnly"]
                configurationNames.each { confName ->
                    configurations[confName].allDependencies.each {
                        if (it.group != null && it.name != null && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            if (it.hasProperty('exclude') && it.exclude.rules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.exclude.rules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = artifactory_context_url
    publish {
        repository {
            repoKey = artifactory_repo_key
            username = artifactory_username
            password = artifactory_password
        }
        defaults {
            publications('aar')
            publishArtifacts = true

            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
            publishPom = true
        }
    }
}